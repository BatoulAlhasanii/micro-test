version: v2beta1
name: micro-test

# This is a list of `pipelines` that DevSpace can execute (you can define your own)
pipelines:
  # You can run this pipeline via `devspace deploy` (or `devspace run-pipeline deploy`)
  deploy:
    run: |-
      run_dependencies --all                            # 1. Deploy any projects this project needs (see "dependencies")
      ensure_pull_secrets --all                         # 2. Ensure pull secrets
      build_images --all -t $(git describe --always)    # 3. Build, tag (git commit hash) and push all images (see "images")
      create_deployments --all                          # 4. Deploy Helm charts and manifests specfied as "deployments"
  # This is the pipeline for the main command: `devspace dev` (or `devspace run-pipeline dev`)
  dev:
    run: |-
      run_dependencies --all       # 1. Deploy any projects this project needs (see "dependencies")
      ensure_pull_secrets --all    # 2. Ensure pull secrets
      build_images --all    # 3. Build, tag (git commit hash) and push all images (see "images")
      create_deployments --all     # 3. Deploy Helm charts and manifests specfied as "deployments"
      start_dev --all                # 4. Start dev mode "app" (see "dev" section)

# This is a list of `deployments` that DevSpace can create for this project
deployments:
  app:
    # This deployment uses `kubectl` but you can also define `helm` deployments
    kubectl:
      manifests:
        - ./infra
      kustomize: true

images:
  auth:
    image: micro-test/auth
    tags:
      - auth-service
    dockerfile: ./auth/Dockerfile
    context: ./auth
    rebuildStrategy: always
    skipPush: true
  tickets:
    image: micro-test/tickets
    tags:
      - tickets-service
    dockerfile: ./tickets/Dockerfile
    context: ./tickets
    rebuildStrategy: always
    skipPush: true
  orders:
    image: micro-test/orders
    tags:
      - orders-service
    dockerfile: ./orders/Dockerfile
    context: ./orders
    rebuildStrategy: always
    skipPush: true
# This is a list of `dev` containers that are based on the containers created by your deployments
dev:
  auth:
    imageSelector: micro-test/auth
    logs:
      enabled: true
      lastLines: 100
#    ports:
#      - port: "3000"
#    open:
#      - url: http://ticketing.dev
    sync:
      - path: ./auth:/app
#      - path: "${DEVSPACE_USER_HOME}/auth/package.json:/app/package.json"
#        file: true
  tickets:
    imageSelector: micro-test/tickets
    logs:
      enabled: true
      lastLines: 100
#    ports:
#      - port: "3001"
#    open:
#      - url: http://ticketing.dev
    sync:
      - path: ./tickets:/app
  orders:
    imageSelector: micro-test/orders
    logs:
      enabled: true
      lastLines: 100
    #    ports:
    #      - port: "3001"
    #    open:
    #      - url: http://ticketing.dev
    sync:
      - path: ./orders:/app
#dev:
#  app:
#    # Replace the container image with this dev-optimized image (allows to skip image building during development)
#    devImage: ghcr.io/loft-sh/devspace-containers/typescript:18-alpine
#    # Sync files between the local filesystem and the development container
#    sync:
#      - path: ./
#    # Open a terminal and use the following command to start it
#    terminal:
#      command: ./devspace_start.sh
#    # Inject a lightweight SSH server into the container (so your IDE can connect to the remote dev env)
#    ssh:
#      enabled: true
#    # Make the following commands from my local machine available inside the dev container
#    proxyCommands:
#      - command: devspace
#      - command: kubectl
#      - command: helm
#      - gitCredentials: true
#    # Forward the following ports to be able access your application via localhost
#    ports:
#      - port: "9229"

# Use the `commands` section to define repeatable dev workflows for this project 
commands:
  migrate-db:
    command: |-
      echo 'This is a cross-platform, shared command that can be used to codify any kind of dev task.'
      echo 'Anyone using this project can invoke it via "devspace run migrate-db"'

# Define dependencies to other projects with a devspace.yaml
# dependencies:
#   api:
#     git: https://...  # Git-based dependencies
#     tag: v1.0.0
#   ui:
#     path: ./ui        # Path-based dependencies (for monorepos)
